---
title: "Controle de versão com git, GitHub e RStudio"
author: "[Maurício Vancine](https://mauriciovancine.github.io/)<br>"
date: "06/05/2025"
date-format: long
format: 
  revealjs:
    theme: [custom.scss]
    slide-number: c/t
    show-slide-number: all
    hash-type: number
    preview-links: false
    chalkboard: true
    logo: "https://git-scm.com/images/logos/downloads/Git-Logo-1788C.png"
    execute:
      echo: true
      eval: true
      warning: false
      message: false
editor: source
lang: pt-br
---

# Vamos finalmente conectar o repositório local (diretório) com o repositório remoto (GitHub)

#
![](img/git_push_pull.svg){fig-align='center'}

## 16. Remoto

![](img/git_remote.png){fig-align='center'}

## 16. Remoto

`git remote`: gerencia conexões com repositórios remotos (GitHub)

```{r eval=FALSE}
$ git remote
# origin
```

<br>

- Mostra os nomes das conexões remotas
- `origin`: nome padrão para o repositório remoto principal

## 16. Remoto

`git remote`: gerencia conexões com repositórios remotos (GitHub)

```{r eval=FALSE}
$ git remote -v

# origin	git@github.com:mauriciovancine/teste.git (fetch)
# origin	git@github.com:mauriciovancine/teste.git (push)
```

<br>

::: {style="font-size: 80%;"}
- Mostra os nomes das conexões remotas: `origin`
- Mostra os URLs das conexões remotas: `git@github.com:mauriciovancine/teste.git`
- `fetch`: endereço para **buscar atualizações** do repositório remoto
- `push`: endereço para **enviar suas alterações** para o repositório remoto
:::

## 16. Remoto

`git remote add`: adiciona ligação com um repositório remoto (GitHub)

**Observação**: usar o SSH para não precisar digitar a senha

```{r eval=FALSE}
$ git remote add origin git@github.com:mauriciovancine/teste.git
```

![](img/git_remote.png){fig-align='center'}

# Tudo certo, o git sabe para onde deve enviar as alterações para o endereço do repositório remoto (GitHub)

## 16. Remoto

`git push`: envia suas alterações (commits) feitas localmente para o repositório remoto (GitHub)

![](img/git_push.png){fig-align='center'}

## 16. Remoto

`git push`: envia suas alterações (commits) feitas localmente para o repositório remoto (GitHub)

Função:

::: {style="font-size: 80%;"}
- Atualiza a branch correspondente no repositório remoto
- Torna suas mudanças disponíveis para outras pessoas
- Se não configurar a chave SSH, exige autenticação (usuário/senha ou token)
:::

![](img/git_push.png){fig-align='center'}

## 16. Remoto

`git push`: envia suas alterações (commits) feitas localmente para o repositório remoto (GitHub)

![](img/git_push_code.png){fig-align='center'}

## 16. Remoto

`git push`: envia suas alterações (commits) feitas localmente para o repositório remoto (GitHub)

```{r eval=FALSE}
$ git push -u origin main

# Enumerating objects: 41, done.
# Counting objects: 100% (41/41), done.
# Delta compression using up to 12 threads
# Compressing objects: 100% (35/35), done.
# Writing objects: 100% (35/35), 4.99 MiB | 155.00 KiB/s, done.
# Total 35 (delta 6), reused 0 (delta 0), pack-reused 0
# remote: Resolving deltas: 100% (6/6), completed with 6 local objects.
# To github.com:mauriciovancine/course-geospatial-data-r.git
#    accc9db..8f70e96  master -> master
```

## 16. Remoto

Em caso de incêndio...

![](img/git_push_fire.png){fig-align='center'}

## 16. Remoto

**CUIDADO**: muitas vezes há conflitos que precisam ser revolvidos entre o repositório local e o remoto

![](img/git_push_force01.jpg){.absolute width=50% right=520 top=200}
![](img/git_push_force02.jpg){.absolute width=46% right=0 top=200}

# E se houver arquivos [enormes] que eu queira versionar no GitHub?

## 16. Remoto

::: {style="font-size: 80%;"}
**Limites de tamanho**
:::

::: {style="font-size: 60%;"}
- Arquivos **acima de 25 MB** causam erro e o envio ao GitHub é bloqueado
- Para **arquivos maiores**, é necessário usar o [Git Large File Storage (LFS)](https://git-lfs.github.com/)
- O repositório no GitHub tem limite de **5 GB** no total
- É recomendável manter o repositório com menos de **1 GB**
- O GitHub **envia avisos** quando o tamanho se aproxima do limite
- Ao **exceder o limite**, o envio é bloqueado com uma mensagem de erro
:::

![](img/gif_large_files.gif){.absolute width=45% right=550 top=400}
![](img/github_limit.png){.absolute width=30% right=-50 top=50}

# E se eu quiser ver o que mudou no repositório remoto e trazer para o repositório local?

## 16. Remoto

![](img/git-fetch-git-pull.png){fig-align='center'}

:::footer
[Git Fetch vs Git Pull: Key Differences Every Developer Should Know](https://manitapanta.com.np/git-fetch-vs-git-pull/)
:::

## 16. Remoto

`git fetch`: busca atualizações do **repositório remoto** e as traz para o **repositório local**, mas não **altera** a branch atual

Função:

::: {style="font-size: 80%;"}
- Atualiza o histórico e as branches remotas
- Permite que você veja o que mudou antes de aplicar
- **Seguro**: não altera seus arquivos nem seu histórico local automaticamente
:::

![](img/git-fetch.png){fig-align='center'}

## 16. Remoto

`git fetch`: busca atualizações do **repositório remoto** e as traz para o **repositório local**, mas não **altera** a branch atual

```{r eval=FALSE}
$ git fetch origin
# remote: Enumerating objects: 4, done.
# remote: Counting objects: 100% (4/4), done.
# remote: Compressing objects: 100% (2/2), done.
# remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0 (from 0)
# Unpacking objects: 100% (3/3), 934 bytes | 934.00 KiB/s, done.
# From github.com:mauriciovancine/teste
#    4029d2c..dfb960b  main       -> origin/main
```

![](img/git-fetch.png){fig-align='center'}

## 16. Remoto

`git fetch`: busca atualizações do **repositório remoto** e as traz para o **repositório local**, mas não **altera** a branch atual

::: {style="font-size: 80%;"}
- Se quiser atualizar a branch local com as mudanças use:
  - `git merge`: para mesclar manualmente
  - `git rebase`: para reescrever o histórico de forma linear 
:::

```{r eval=FALSE}
$ git merge origin/main
$ git rebase origin/main
```

![](img/git-fetch.png){fig-align='center'}

## 16. Remoto

`git pull`: busca atualizações do **repositório remoto** e as traz para o **repositório local**, **alterando** a branch atual

![](img/git_pull.png){fig-align='center'}

## 16. Remoto

`git pull`: busca atualizações do **repositório remoto** e as traz para o **repositório local**, **alterando** a branch atual automativamente

- Equivalente a rodar: `git fetch` + `git merge`

Função:

::: {style="font-size: 80%;"}
- Sincronizar sua branch local com as alterações mais recentes do remoto
- Trabalhar colaborativamente, mantendo o código sempre atualizado
- Automatizar o processo de trazer e aplicar mudanças
- **Cuidado**: pode causar conflitos se houver alterações locais incompatíveis com as mudanças remotas
:::

## 16. Remoto

**Resumo**

![](img/git_remote_total.png)

:::footer
[What's the Difference Between the Git Fetch and Git Pull Commands?](https://www.linkedin.com/pulse/whats-difference-between-git-fetch-pull-commands-omar-ismail/)
:::

# Por fim, requisição das alterações do nosso repositório remoto para o repositório remoto original: **Pull request**

# 
![](img/git_push_pull_request.png){fig-align='center'}

## 17. Pull request

`Pull Request`: solicita que o repositório central (remoto) aceite (pull - 'puxe') as alterações realizadas do nosso fork

![](img/git_pull_request.png){fig-align='center'}

## 17. Pull request

`Pull Request`: solicita que o repositório central (remoto) aceite (pull - 'puxe') as alterações realizadas do nosso fork

![](img/git_pull_request.png){fig-align='center'}

# 18. Conflitos

## Conflitos


