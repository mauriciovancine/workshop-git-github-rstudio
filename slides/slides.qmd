---
title: "Controle de versão com git, GitHub e RStudio"
author: "<br><br>Maurício Vancine<br>"
date: "06/05/2025"
date-format: long
format: 
  revealjs:
    theme: [custom.scss]
    slide-number: c/t
    show-slide-number: all
    hash-type: number
    preview-links: false
    chalkboard: true
    logo: "https://git-scm.com/images/logos/downloads/Git-Logo-1788C.png"
    execute:
      echo: true
      eval: true
      warning: false
      message: false
editor: source
lang: pt-br
---

## Workshop

<br>

- Carga horária bem enxuta: 06 h
- Parte teórica: 03 h (hoje)
- Parte prática: 03 h (amanhã)
- Nosso principal **objetivo** é **introduzir** o tema de controle de versão
- Cursos são ótimo para **"quebrar o gelo"**, mas o aprendizado depende de vocês

## Conteúdo{.smaller}

::: columns
::: {.column width="50%"}
::: nonincremental
1. Conferindo os computadores
2. Controle de versão
3. git e GitHub 
4. Detalhes do GitHub
5. Criando um repositório
6. Configuração: `git config`
7. Controle de versão na prática
8. Iniciando localmente: `git init`
9. Iniciando remotamente: `fork` e `git clone`
10. Versionamento: `git status`, `git add` e `git commit`
:::
:::

::: {.column width="50%"}
::: nonincremental
11. Ignorando: `.gitignore`
12. Histórico: `git log` e `git show`
13. Diferença: `git diff`
14. Desfazer: `git restore`, `git revert` e `git reset`
15. Ramificações: `git branch`, `git switch` e `git merge`
16. Remoto: `git remote`, `git push` e `git pull`
17. GitHub: `Pull request`
18. Conflitos
19. Interface gráfica do RStudio  
20. Mais informações
:::
:::
:::

## IMPORTANTE!!!

**Estamos num espaço seguro e amigável**

- Sintam-se à vontade para me interromper e tirar dúvidas

<center>
<img src="img/general_starwars_teamwork.png" style="width:50%"/>
</center>

::: footer
[\@allison_horst](https://twitter.com/allison_horst)
:::

# 1. Conferindo os computadores

# 
![](img/general_hard_soft.png){fig-align='center'}

:::footer
[Café com Código](https://www.instagram.com/cafecomcodigo/?hl=pt)
:::

## 1. Conferindo os computadores

<br>
**R (>4.5.x)**  
[https://www.r-project.org/](https://www.r-project.org/)

<br>

**RStudio (>2025.05.0)**  
[https://www.rstudio.com/](https://www.rstudio.com/)

<br>

**git (>2.34.x)**  
[https://git-scm.com/](https://git-scm.com/)

# 2. Controle de versão

# 
![](img/git_work.png){fig-align='center'}


## 2. Controle de versão

Quem nunca...

![](img/git_file_version.png){fig-align='center'}

:::footer
[PhD Comics](https://phdcomics.com/)
:::

## 2. Controle de versão

Manejar projetos **individualmente**

<br><br>
![](img/git_one_brantch.png){.absolute width=80% right=100 top=250}

## 2. Controle de versão

Manejar projetos **compartilhados**

![](img/git_multi_brantch.png){.absolute width=90% right=50 top=200}

## 2. Controle de versão

Manejar projetos **no tempo**

![](img/git_time.png){fig-align='center'}

:::footer
[Creating and Hosting a Personal Site on GitHub](https://jmcglone.com/guides/github-pages/)
:::

## 2. Controle de versão

Principal **ferramenta** utilizada em grandes projetos

![](img/git_article.png){.absolute width=50% right=520 top=150}
![](img/git_article_fig.png){.absolute width=60% right=-150 top=150}
![](img/git_article_table.png){.absolute width=50% right=520 top=400}

:::footer
[Perez-Riverol et al. (2016)](https://doi.org/10.1371/journal.pcbi.1004947)
:::

## 2. Controle de versão

Cada vez mais **necessária** em colaborações

![](img/github_article_2022.png){.absolute width=50% right=600 top=150}
![](img/github_article_2022_fig02.jpg){.absolute width=70% right=-150 top=180}
![](img/github_article_2022_fig01.jpg){.absolute width=40% right=700 top=330}

:::footer
[Braga et al. (2022)](https://doi.org/10.1111/2041-210X.14108)
:::

# 3. git e GitHub

## 3. git e GitHub

**git**

- Software (app) que faz o **controle de versão**
- Maneja os **repositórios locais** (computador) e **repositório remotos** (e.g. GitHub)

![](img/git_logo.png){.absolute width=60% right=200 top=370}

:::footer
[git](https://git-scm.com/)
:::

## 3. git e GitHub

**git**

- Criado por **Linus Torvalds** em 2005 para substituir o BitKeeper no gerenciamento do Kernel Linux
-  Software livre, distribuído sob a licença GNU GPL v.2

![](img/general_linus.jpg){.absolute width=50% right=480 top=350}
![](img/general_tux.png){.absolute width=40% right=0 top=320}

:::footer
[kernel](https://www.kernel.org/), [Começando - Uma Breve História do Git](https://git-scm.com/book/pt-br/v2/Come%C3%A7ando-Uma-Breve-Hist%C3%B3ria-do-Git#:~:text=Desde%20seu%20nascimento%20em%202005,%2Dgit%2Dbranching%5D).)
:::

## 3. git e GitHub

**git**

<p align="center">
<iframe width="80%" height="480" align="center" src="https://www.youtube.com/embed/6Czd1Yetaac" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen>
</iframe>
</p>

## 3. git e GitHub

**GitHub**

- Repositórios remotos  
- **Plataformas de hospedagem** de códigos e controle de versão

![](img/github_logo2.png){.absolute width=50% right=600 top=350}
![](img/gitlab_logo.png){.absolute width=28% right=350 top=350}
![](img/bitbucket.webp){.absolute width=28% right=0 top=350}

:::footer
[GitHub](https://www.kernel.org/), [GitLab](https://www.kernel.org/), [Bitbucket](https://bitbucket.org/)
:::

## 3. git e GitHub

**ATENÇÃO: dois conceitos!**  

- **git**: software (app) que faz o controle de versão
- **GitHub**: plataforma para hospedar arquivos versionados

![](img/git_github_diff.png){.absolute width=75% right=150 top=300}

:::footer
[Is Git the Same Thing as Github!?](https://jahya.net/blog/git-vs-github/)
:::

## 3. git e GitHub

**ATENÇÃO: dois conceitos!**  

- **git**: software (app) que faz o controle de versão
- **GitHub**: plataforma para hospedar arquivos versionados

![](img/git_github_link.png){.absolute width=70% right=160 top=300}

## 3. git e GitHub

**GitHub**

Vamos criar uma conta no GitHub (caso não possuam)

![](img/github_logo.png){.absolute width=50% right=250 top=200}

:::footer
[GitHub](https://github.com)
:::

## 3. git e GitHub

**GitHub**

Salvem ou recuperem essas informações!

<br><br>

**username**: mauriciovancine  
**email**: mauricio.vancine@gmail.com  
**senha**: !@#$%¨&*+

![](img/gif_gandalf.gif){.absolute width=40% right=-100 top=300}

# 4. Detalhes do GitHub

## 4. Detalhes do GitHub

**Perfil**

![](img/github_profile.png){fig-align='center'}

## 4. Detalhes do GitHub

**Perfil**

- **Overview**: suas informações (rede social)
- **Repositories**: lista todos os repositórios
- **Projects**: ferramentas de gerenciamento (Kanban e tarefas)
- **Packages**: pacotes (bibliotecas) ou containers (Docker)
- **Stars**: respositórios marcados com estrela

## 4. Detalhes do GitHub

**Settings**: superior direito > foto do perfil > `Settings`

![](img/github_profile_settings.png){fig-align='center'}

## 4. Detalhes do GitHub

**Settings**: superior direito > foto do perfil > `Settings`

![](img/github_profile_settings_detalhes.png){fig-align='center'}

## 4. Detalhes do GitHub

**Settings**

![](img/github_profile_settings_detalhes02.png){fig-align='center'}

## 4. Detalhes do GitHub

**Repositório**

![](img/github_repository.png){fig-align='center'}

## 4. Detalhes do GitHub

**Repositório**

::: {style="font-size: 80%;"}
- **Code**: arquivos, histórico, clone/download e README.md
- **Issues**: rastrear bugs, sugestões de melhorias ou tarefas
- **Pull requests**: gerencia propostas de alterações no código
- **Actions**: gerencia fluxos de trabalho automatizados
- **Projects**: ferramentas de gerenciamento visual (Kanban)
- **Wiki**: documentação extensa e detalhada do projeto
- **Security**: ajuda a gerenciar a segurança do código
- **Insights**:  fornece análises detalhadas sobre o repositório
- **Settings**: gerencia as configurações do repositório
:::

## 4. Detalhes do GitHub

**README.md**

![](img/github_readme.png){fig-align='center'}

## 4. Detalhes do GitHub

**README.md**

- Arquivo de documentação principal de um repositório
- Escrito em Markdown (formatação simples e amigável)
- Aparece automaticamente na página inicial do repositório
- Fornece informações essenciais sobre o projeto
- Apresenta o propósito do projeto
- Explica o conteúdo dos arquivos de códigos e diretórios

::: footer
[Markdown](https://daringfireball.net/projects/markdown/), [Markdown Guide](https://www.markdownguide.org/)
:::

# 5. Criando um repositório

## 5. Criando um repositório

**Criar repositório**: Perfil > Repositories > New

![](img/github_criar_repositorio01.png){fig-align='center'}

## 5. Criando um repositório

**Criar um repositório**

1. Nome do repositório
1. Descrição (opcional)
1. Público ou privado
1. Add um README.md
1. Add .gitignore
1. Licença
1. Criar repositório

![](img/github_criar_repositorio02.png){.absolute width=50% right=-30 top=130}

# Prática 1

## Prática 1

**Criar uma página inicial para o perfil do GitHub**

![](https://www.alura.com.br/artigos/assets/como-criar-um-readme-para-seu-perfil-github/imagem1.gif)

::: footer
[Como criar um README para o seu perfil do GitHub](https://www.alura.com.br/artigos/como-criar-um-readme-para-seu-perfil-github?srsltid=AfmBOopGVNPqjqVMXQ42hTQpH0exadVwz6U8jsiiNDAyehD0k--sct7e)
:::

## Prática 1

**Criar uma página inicial para o perfil do GitHub**

<br>

1. Criem um repositório com o nome de usuário de vocês (e.g. `mauriciovancine`)
1. Criem um arquivo `README.md` nesse repositório
1. Preencham com algum conteúdo em Markdown
1. Comitem e voltem para a página de perfil

::: footer
[Como criar um README para o seu perfil do GitHub](https://www.alura.com.br/artigos/como-criar-um-readme-para-seu-perfil-github?srsltid=AfmBOopGVNPqjqVMXQ42hTQpH0exadVwz6U8jsiiNDAyehD0k--sct7e)
:::

# Prática 2

## Prática 2

**Criar um repositório para exemplo no curso**

<br>

1. Criem um repositório chamado `teste`)
1. Criem um arquivo `README.md` nesse repositório
1. Preencham com algum detalhe do curso neste `README.md`

# 6. Configurações: RStudio, git, GitHub 

## 6. Configurações

**RStudio**

![](img/rstudio.png){fig-align='center'

## 6. Configurações

**RStudio**

::: {style="font-size: 80%;"}
- Tools > Global Options > Git/SVN
:::

![](img/rstudio_git_config01.png){.absolute width=80% right=0 top=200}

## 6. Configurações

**RStudio**

::: {style="font-size: 80%;"}
- Marque **Enable version control interface...**
- **Git executable**:
:::

::: {style="font-size: 65%;"}
- Windows: `C:/Program Files/Git/bin/git.exe`
- Ubuntu: `/usr/bin/git`
- Mac: `/usr/bin/git`
:::

![](img/rstudio_git_config02.png){.absolute width=50% right=-100 top=180}

## 6. Configurações

**RStudio**

Chave SSH

::: {style="font-size: 80%;"}
1. Create RSA key
1. View public key
1. Copiar: Ctrl + C
:::

![](img/rstudio_git_config03.jpg){.absolute width=50% right=-100 top=180}
![](img/github_brave.jpg){.absolute width=45% right=500 top=400}
![](img/general_key.png){.absolute width=13% right=800 top=500}

## 6. Configurações

**GitHub**

::: {style="font-size: 80%;"}
- **Add chave SSH**: Perfil > Settings > SSH and GPG keys > New SSH key
:::

![](img/github_ssh_key.png){fig-align='center'}

::: footer
[Add ao GitHub](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account)
:::

## 6. Configurações

**GitHub**

::: {style="font-size: 80%;"}
- Title: um nome qualquer (eu add por nome de PC ou notebook)
- Key: colar (Ctrl + V)
- Add SSH key
:::

![](img/github_ssh_key_add.png){.absolute width=90% right=-200 top=230}

::: footer
[Add ao GitHub](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account)
:::

## 6. Configurações

**git**

::: {style="font-size: 80%;"}
- `git config`: definir as configurações de usuário do git
- Terminal (colar com `ctrl + shift + v`)
:::

```{r eval=FALSE}
$ git config --list
$ git config --global user.name "meu nome"
$ git config --global user.email "email@dominio.com"
$ git config --list
```

![](img/git_config.png){fig-align='center'}

# Tudo certo até aqui?

# Agora sim, podemos começar o versionamento...

# 7. Controle de versão na prática

## 7. Controle de versão na prática

**Duas formas de trabalhar com o git e GitHub**

::: {style="font-size: 80%;"}
1. Iniciando um projeto em nosso computador - localmente (git)
1. Iniciando por um repositório remoto - remotamente (GitHub)
:::

![](img/github_logo.png){.absolute width=15% right=800 top=300}
![](img/git_operation.png){.absolute width=52% right=250 top=260}
![](img/git_logo.png){.absolute width=20% right=70 top=570}

## 7. Controle de versão na prática

![](img/git_github_workflow.png){fig-align='center'}
![](img/git_folder_project.png){.absolute width=5% right=220 top=630}

## 7. Controle de versão na prática

![](img/git_fork_clone_flow.png){.absolute width=45% right=250 top=100}

## 7. Controle de versão na prática

![](img/git_fork_clone_flow.png){.absolute width=45% right=250 top=100}
![](img/github_logo.png){.absolute width=30% right=700 top=150}
![](img/git_folder_project.png){.absolute width=15% right=780 top=520}
![](img/git_logo.png){.absolute width=25% right=-50 top=550}

# 8. Iniciando localmente

## 8. Iniciando localmente
  
- `git init`: inicia o versionamento de um repositório local

![](img/git_init.png){.absolute width=40% right=550 top=180}
![](img/git_folder.png){.absolute width=65% right=-50 top=180}

# Prática 3

## Prática 3

<br>

1. Criem uma pasta chamada: `teste_local` 
1. Abram o RStudio
1. Selecionem o caminho desta pasta
1. Mudem o diretório para esta pasta (`setwd("teste_local")`)
1. Criem um arquivo dentro desta pasta `script.R`

## Prática 3

1. Abram o `Terminal` do RStudio
1. No `Terminal`, rodem: `cd caminho/pasta`
1. No `Terminal`, rodem: `git init`
1. No `Terminal`, rodem: `git add .`
1. No `Terminal`, rodem: `git commit -m 'add script.R'`
1. Deletem esse script, inclusive da lixeira
1. No `Terminal`, rodem: `git restore script.R`
1. Testemunhem o poder do git...

# 9. Iniciando remotamente

## 9. Iniciando remotamente

**Fork**: cópia de um repositório para o seu **repositório (GitHub)**

![](img/git_fork.png){fig-align='center'}

# Prática 4

## Prática 4

Forken o repositório do workshop

![](img/github_fork_site.png)

::: footer
[https://github.com/mauriciovancine/workshop-git-github-rstudio](https://github.com/mauriciovancine/workshop-git-github-rstudio)
:::

## 9. Iniciando remotamente

Agora o repositório do workshop, que estava no meu GitHub, foi copiado ("garfado") para o GitHub de vocês

![](img/gif_fork.gif){fig-align='center'}

## 9. Iniciando remotamente

**Clone**: download de um **repositório remoto** (e.g. GitHub) para o seu **repositório local** (computador)

![](img/git_clone_example.png){.absolute width=80% right=130 top=200}

## 9. Iniciando remotamente

`git clone`: download de um **repositório remoto** (e.g. GitHub) para o seu **repositório local** (computador) 

![](img/git_clone.png){.absolute width=50% right=260 top=210}

:::footer
[Git 03: Git Clone - Work Locally On Your Computer](https://www.neonscience.org/resources/learning-hub/tutorials/github-git-clone)
:::

## 9. Iniciando remotamente

Primeiro, vamos **criar uma pasta** chamada `github`

<br>

```{r eval=FALSE}
".                               # raiz"
"    ├── home/                   # home"
"        ├── data/               # dados" 
"            ├── github/         # todos os repositorios"
```

![](img/diretorio.png){.absolute width=100% right=30 top=400}

## 9. Iniciando remotamente

1. **Download diretamente** do repositório no formato **.zip**

![](img/github_clone_zip.png){.absolute width=100% right=30 top=210}

## 9. Iniciando remotamente

2. Usando o **terminal** para clonar pelo **SSH** (configurado anteriormente)

![](img/github_clone_git.png){.absolute width=100% right=30 top=210}

## 9. Iniciando remotamente

2. Usando o **terminal** para clonar pelo **SSH** (configurado anteriormente)

```{r eval=FALSE}
$ git clone git@github.com:mauriciovancine/teste.git
```

<br>

![](img/git_clone_terminal.png){fig-align='center'}

## 9. Iniciando remotamente

3. Usando o **Projeto do RStudio** para clonar pelo **SSH** (configurado anteriormente)

![](img/git_rstudio.png){.absolute width=50% right=200 top=210}

## 9. Iniciando remotamente

Criar um **Projeto R** com controle de versão

`File > New Project > Version Control`

![](img/rstudio_git_create01.png){.absolute width=100% right=20 top=210}

## 9. Iniciando remotamente

Escolher **clonar repositório** do GitHub

`Git`

![](img/rstudio_git_create02.png){.absolute width=100% right=20 top=210}

## 9. Iniciando remotamente

Preencher com dados do repositório do **GitHub**

`Repository URL` 

![](img/rstudio_git_create03.png){.absolute width=100% right=20 top=210}

## 9. Iniciando remotamente

Preencher:

::: {style="font-size: 80%;"}
- Repository URL: `git@github.com:mauriciovancine/teste.git`
- Project directory name: `preenchimento automático`
- Create project as subdirectory of: `/home/mude/data/github`
- Se uma janela aparecer, basta digitar "yes"
- Aguardar o download
:::

![](img/git_clone_rstudio.png){.absolute width=40% right=100 top=380}

#
![](img/break-time01.jpg){fig-align='center'}

# 10. Versionamento

## 10. Versionamento

![](img/git_add_commit.png){.absolute width=90% right=40 top=90}

![](img/github_logo.png){.absolute width=20% right=-180 top=160}
![](img/github_logo.png){.absolute width=20% right=970 top=160}
![](img/git_folder_project.png){.absolute width=15% right=990 top=500}
![](img/git_logo.png){.absolute width=20% right=-180 top=530}

## 10. Versionamento

**Comandos git** para o fluxo de trabalho dos repositórios

![](img/git_workflow.png){.absolute width=100% right=50 top=150}
![](img/git_folder_project.png){.absolute width=15% right=1070 top=350}
![](img/github_logo.png){.absolute width=20% right=-180 top=350}
![](img/git_logo.png){.absolute width=20% right=570 top=610}

## 10. Versionamento

Fluxo do versionamento

![](img/git_add_commit_flow.png){.absolute width=70% right=130 top=200}

::: footer
[pro Git (2014)](https://git-scm.com/book/pt-br/v2/Fundamentos-de-Git-Obtendo-um-Reposit%C3%B3rio-Git)
:::

## 10. Versionamento

Fluxo do versionamento

::: {style="font-size: 70%;"}
1. **Diretório de trabalho (*working directory*)**: pasta com os arquivos
1. **Preparação (*staging area*)**: arquivos adicionados para serem versionados [Index] (.git) 
1. **Repositório (*repository*)**: versão consolidada dos arquivos [HEAD] (.git)
:::

![](img/git_files_states.png){.absolute width=100% right=30 top=320}

## 10. Versionamento

Fluxo do versionamento

::: {style="font-size: 70%;"}
1. **Diretório de trabalho (*working directory*)**: pasta com os arquivos
1. **Preparação (*staging area*)**: arquivos adicionados para serem versionados [Index] (.git)
1. **Repositório (*repository*)**: versão consolidada dos arquivos [HEAD] (.git)
:::

![](img/git_trees.png){.absolute width=60% right=230 top=450}

## 10. Versionamento

Fluxo do versionamento usando fotos

![](img/git_photo01.jpg){.absolute width=40% right=700 top=150}
![](img/git_trees.png){.absolute width=60% right=230 top=450}

::: footer
[IX Congresso de Herpetologia](https://9cbh.galoa.com.br)
:::

## 10. Versionamento

Fluxo do versionamento usando fotos

![](img/git_photo01.jpg){.absolute width=40% right=700 top=150}
![](img/git_photo02.jpg){.absolute width=27% right=400 top=150}
![](img/git_trees.png){.absolute width=60% right=230 top=450}

::: footer
[IX Congresso de Herpetologia](https://9cbh.galoa.com.br)
:::

## 10. Versionamento

Fluxo do versionamento usando fotos

![](img/git_photo01.jpg){.absolute width=40% right=700 top=150}
![](img/git_photo02.jpg){.absolute width=27% right=400 top=150}
![](img/git_photo03.webp){.absolute width=40% right=-35 top=150}
![](img/git_trees.png){.absolute width=60% right=230 top=450}

::: footer
[IX Congresso de Herpetologia](https://9cbh.galoa.com.br)
:::

# Mas como o git sabe quais arquivos foram alterados?

## 10. Versionamento

Rastreamento dos arquivos no diretório de trabalho

::: {style="font-size: 80%;"}
1. **Untracked** (*não-rastreado*): arquivos não rastreados pelo git
1. **Tracked** (*rastreado*): arquivos rastreados pelo git (adicionados no **stage**)
:::

![](img/git_states.webp){.absolute width=60% right=220 top=330}

::: footer
[Git — Os quatro estados](https://medium.com/@devmasterteam/git-ebook-8808f7301054)
:::

## 10. Versionamento

Quatro estados de alteração dos arquivos

::: {style="font-size: 60%;"}
1. **Untracked (*não-rastreado*)**: arquivos não rastreados pelo git
1. **Unmodified (*não-modificado*)**: arquivos rastreados e sem modificações
1. **Modified (*modificado*)**: arquivos rastreados e com modificações
1. **Staged (*preparado*)**: arquivos rastreados, com modificações e preparados para o commit
:::

![](img/git_states.webp){.absolute width=60% right=220 top=330}

::: footer
[Git — Os quatro estados](https://medium.com/@devmasterteam/git-ebook-8808f7301054)
:::

## 10. Versionamento

**IMPORTANTE!**

::: {style="font-size: 60%;"}
1. Arquivos adicionados quando preparados se tornam **staged**
1. Arquivos editados se tornam **modified**
1. Arquivos editados e preparados se tornam **staged**
1. Arquivos removidos se tornam **untracked**
1. Após um commit, todos os arquivos se tornam **unmodified**
:::

![](img/git_states_pro.png){.absolute width=70% right=160 top=370}

::: footer
[pro Git (2014)](https://git-scm.com/book/pt-br/v2/Fundamentos-de-Git-Obtendo-um-Reposit%C3%B3rio-Git)
:::

## 10. Versionamento

`git status`: mostra o estado do repositório

```{r eval=FALSE}
$ git status

# On branch master
# nothing to commit, working tree clean
```

![](img/git_states_pro.png){.absolute width=60% right=220 top=420}

::: footer
[pro Git (2014)](https://git-scm.com/book/pt-br/v2/Fundamentos-de-Git-Obtendo-um-Reposit%C3%B3rio-Git)
:::

## 10. Versionamento

Vamos criar um arquivo no diretório

Usando a aba **Terminal** do RStudio

```{r eval=FALSE}
$ touch test.txt
```

![](img/general_bloco_notas.png){fig-align='center'}

## 10. Versionamento

`git status`: mostra o estado do repositório

```{r eval=FALSE}
$ git status

# On branch master
# Untracked files:
#   (use "git add <file>..." to include in what will be committed)
# 	test.txt
# 
# nothing added to commit but untracked files present (use "git add" to track)
```

![](img/git_states_pro.png){.absolute width=60% right=220 top=420}

::: footer
[pro Git (2014)](https://git-scm.com/book/pt-br/v2/Fundamentos-de-Git-Obtendo-um-Reposit%C3%B3rio-Git)
:::

## 10. Versionamento

`git add`: adiciona mudanças após edições (**staging area**) [Index]

```{r eval=FALSE}
$ git add test.txt
```

![](img/git_add_commit_flow.png){.absolute width=45% right=270 top=400}

::: footer
[pro Git (2014)](https://git-scm.com/book/pt-br/v2/Fundamentos-de-Git-Obtendo-um-Reposit%C3%B3rio-Git)
:::

## 10. Versionamento

`git add`: adiciona mudanças após edições (**staging area**) [Index]

```{r eval=FALSE}
$ git add test.txt -v

# add 'test.txt'
```

![](img/git_add_commit_flow.png){.absolute width=45% right=270 top=400}

::: footer
[pro Git (2014)](https://git-scm.com/book/pt-br/v2/Fundamentos-de-Git-Obtendo-um-Reposit%C3%B3rio-Git)
:::

## 10. Versionamento

`git add`: adiciona mudanças após edições (**staging area**) [Index]

```{r eval=FALSE}
$ git add -Av

# add 'test.txt'
```

![](img/git_add_commit_flow.png){.absolute width=45% right=270 top=400}

::: footer
[pro Git (2014)](https://git-scm.com/book/pt-br/v2/Fundamentos-de-Git-Obtendo-um-Reposit%C3%B3rio-Git)
:::

## 10. Versionamento

`git add`: adiciona mudanças após edições (**staging area**) [Index]

```{r eval=FALSE}
$ git add .
```

![](img/git_add_commit_flow.png){.absolute width=45% right=270 top=400}

::: footer
[pro Git (2014)](https://git-scm.com/book/pt-br/v2/Fundamentos-de-Git-Obtendo-um-Reposit%C3%B3rio-Git)
:::

## 10. Versionamento

`git status`: mostra o estado do repositório

```{r eval=FALSE}
$ git status

# On branch master
# Changes to be committed:
#   (use "git restore --staged <file>..." to unstage)
# 	new file:   test.txt
```

![](img/git_trees.png){.absolute width=60% right=230 top=450}

::: footer
[pro Git (2014)](https://git-scm.com/book/pt-br/v2/Fundamentos-de-Git-Obtendo-um-Reposit%C3%B3rio-Git)
:::

## 10. Versionamento

`git commit`: registra as alterações da **staging area** no **repository** [HEAD]

::: {style="font-size: 80%;"}
- Cria um **snapshot** do repositório, contendo:
  - Mudanças realizadas nos arquivos
  - Mensagem descritiva (*mensagem do commit*)
  - Metadados do autor, data e identificador único (**hash**)
:::

![](img/git_add_commit_flow.png){.absolute width=45% right=270 top=400}

::: footer
[pro Git (2014)](https://git-scm.com/book/pt-br/v2/Fundamentos-de-Git-Obtendo-um-Reposit%C3%B3rio-Git)
:::

## 10. Versionamento

`git commit`: registra as alterações da **staging area** no **repository** [HEAD]

```{r eval=FALSE}
$ git commit -m "add test.txt"

# [master 5a164d5] add test.txt
# 1 file changed, 0 insertions(+), 0 deletions(-)
# create mode 100644 test.txt
```

![](img/git-add-commit.png){.absolute width=50% right=200 top=400}

::: footer
[Guia dos principais comandos do GIT](https://blog.dbins.com.br/guia-dos-principais-comandos-do-git)
:::

## 10. Versionamento

`git status`: mostra o estado do repositório

```{r eval=FALSE}
$ git status

# On branch master
# nothing to commit, working tree clean
```

![](img/git_states_pro.png){.absolute width=60% right=220 top=420}

::: footer
[pro Git (2014)](https://git-scm.com/book/pt-br/v2/Fundamentos-de-Git-Obtendo-um-Reposit%C3%B3rio-Git)
:::

## 10. Versionamento

Fluxo do versionamento

::: {style="font-size: 70%;"}
1. **Diretório de trabalho (*working directory*)**: pasta com os arquivos
1. **Preparação (*staged area*)**: arquivos adicionados para serem versionados [Index] (.git)
1. **Repositório (*repository*)**: versão consolidada dos arquivos  [HEAD] (.git)
:::

![](img/git_files_states.png){.absolute width=100% right=30 top=320}

## 10. Versionamento

Usando a aba **Files** do RStudio, vamos abrir e editar o arquivo **test.txt**

```{r eval=FALSE}
Acabo de inserir uma edição ao meu arquivo
```

![](img/general_bloco_notas.png){fig-align='center'}
## 10. Versionamento

`git status`: mostra o estado do repositório

```{r eval=FALSE}
$ git status

# On branch master
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git restore <file>..." to discard changes in working directory)
# 	modified:   test.txt
# no changes added to commit (use "git add" and/or "git commit -a")
```

![](img/git_states_pro.png){.absolute width=60% right=220 top=420}

::: footer
[pro Git (2014)](https://git-scm.com/book/pt-br/v2/Fundamentos-de-Git-Obtendo-um-Reposit%C3%B3rio-Git)
:::

## 10. Versionamento

`git add`: adiciona mudanças após edições na **staging area** [Index]

```{r eval=FALSE}
$ git add -Av

# add 'test.txt'
```

![](img/git_states_pro.png){.absolute width=60% right=220 top=420}

## 10. Versionamento

`git status`: mostra o estado do repositório

```{r eval=FALSE}
$ git status

# On branch master
# Changes to be committed:
#   (use "git restore --staged <file>..." to unstage)
# 	modified:   test.txt
```

![](img/git_add_commit_flow.png){.absolute width=45% right=270 top=400}

## 10. Versionamento

`git commit`: registra as alterações da **staging area** no **repository** [HEAD]

```{r eval=FALSE}
$ git commit -m "mod test.txt"

# [master f73fca3] modificação do test.txt
#  1 file changed, 1 insertion(+)
```

![](img/git-add-commit.png){.absolute width=50% right=200 top=400}

## 10. Versionamento

`git status`: mostra o estado do repositório

```{r eval=FALSE}
$ git status

# On branch master
# nothing to commit, working tree clean
```

![](img/git_add_commit_flow.png){.absolute width=45% right=270 top=400}

## 10. Versionamento

**ATENÇÃO!**

::: {style="font-size: 80%;"}
- Mensagens de commit são **fundamentais** 
- Devem ser curtas e indicar as **mudanças** feitas nos arquivos
:::

![](img/git-commits-messages.jpg){.absolute width=75% right=120 top=250}

::: footer
[Como escrever mensagens de commits no Git](https://www.lucascaton.com/pt-BR/2017/10/16/como-escrever-mensagens-de-commits-no-git)
:::

## 10. Versionamento

**ATENÇÃO!**

::: {style="font-size: 80%;"}
- Mensagens de commit são **fundamentais** 
- Devem ser curtas e indicar as **mudanças** feitas nos arquivos
:::

![](img/git-commits-messages.webp){.absolute width=40% right=310 top=250}

::: footer
[3 dicas práticas para um bom commit](https://medium.com/@rafaelnai/3-dicas-pr%C3%A1ticas-para-um-bom-commit-673da001e1d1)
:::

## 10. Versionamento

**Corrigir mensagens de commit**

- Corrigir mensagens  de commit é complicado
- Vou mostrar como corrigir a última mensagem

```{r eval=FALSE}
$ git log

# commit dfefc8530b25bfe96d8ccf7ba74aa0858ade6346 (HEAD -> master)
# Author: mauriciovancine <mauricio.vancine@gmail.com>
# Date:   Sat May 31 18:22:19 2025 -0300

#     modificação do test.txt

# commit 5a164d55896d6251249a5142f6110e8e0b06a49b
# Author: mauriciovancine <mauricio.vancine@gmail.com>
# Date:   Fri May 30 09:53:55 2025 -0300

#     add test.txt

# commit 50c520ff2cd531f1652eafb4654a9fb3fcd196af
# Author: mauriciovancine <mauricio.vancine@gmail.com>
# Date:   Thu May 29 09:34:13 2025 -0300

#     first commit
```

## 10. Versionamento

**Corrigir mensagens de commit**

```{r eval=FALSE}
$ git commit --amend -m "correcao do ultimo commit"
```

![](img/git_commit_amend.jpg){fig-align='center'}

:::footer
[GitFichas - Jéssia Temporal](https://gitfichas.com/projects/031)
:::

## 10. Versionamento

**Corrigir mensagens de commit**

```{r eval=FALSE}
$ git log

# commit dfefc8530b25bfe96d8ccf7ba74aa0858ade6346 (HEAD -> master)
# Author: mauriciovancine <mauricio.vancine@gmail.com>
# Date:   Sat May 31 18:22:19 2025 -0300

#     correcao do ultimo commit

# commit 5a164d55896d6251249a5142f6110e8e0b06a49b
# Author: mauriciovancine <mauricio.vancine@gmail.com>
# Date:   Fri May 30 09:53:55 2025 -0300

#     add test.txt

# commit 50c520ff2cd531f1652eafb4654a9fb3fcd196af
# Author: mauriciovancine <mauricio.vancine@gmail.com>
# Date:   Thu May 29 09:34:13 2025 -0300

#     first commit
```

## 10. Versionamento

Fluxo do versionamento

::: {style="font-size: 70%;"}
1. **Diretório de trabalho (*working directory*)**: pasta com os arquivos
1. **Preparação (*staged area*)**: arquivos adicionados para serem versionados (.git)
1. **Repositório (*repository*)**: versão consolidada dos arquivos (.git)
:::

![](img/git_files_states.png){.absolute width=100% right=30 top=320}

## 10. Versionamento

**git**

<p align="center">
<iframe width="80%" height="480" align="center" src="https://www.youtube.com/embed/6OokP-NE49k" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen>
</iframe>
</p>

# E se houver arquivos que eu não quero versionar?

# 
![](img/gitignore.jpg){fig-align='center'}

## 11. Ignorando

`.gitignore`

::: {style="font-size: 80%;"}
- Arquivo especial que indica ao git que determinados arquivos ou diretórios devem ser **ignorados** no versionamento

- Arquivo de texto simples em que **cada linha** especifica um padrão de arquivos ou diretórios a serem ignorados

- Geralmente colocado no **diretório raiz** de um repositório

- Atentar para o **ponto**, pois é um arquivo oculto [`.gitignore`]
:::

![](img/gitignore.png){fig-align='center'}

## 11. Ignorando

`.gitignore`

![](img/gitignore_file.png){fig-align='center'}

::: footer
[The .gitignore File - Complete Guide with Examples](https://blog.yarsalabs.com/gitignore-file-guide-with-examples/)
:::

## 11. Ignorando

Arquivo `.gitignore`

- Criando um arquivo
```{r eval=FALSE}
$ touch ~/.gitignore
```

- Preenchendo com padrões
```{r eval=FALSE}
# ignorar nome de arquivos
raster.tif

# ignorar diretorios
temp/

# ignorar padrao 
*.tif (ignorar todos com .tif)
!.tif (nao ignorar todos com .tif)
```

# Vamos ver como acessar todo o histórico de commits do git?

## 12. Histórico

`git log`: histórico dos commits

<br>

::: {style="font-size: 80%;"}
1. Identificador do commit (hash)
1. Autor <e-mail>
1. Data
1. Descrição (mensagem de commit)
:::

![](img/git_log.png){.absolute width=50% right=-30 top=200}

## 12. Histórico

**hash**

::: {style="font-size: 80%;"}
-  Identificador **único**, gerado pelo git, que representa um commit

- É baseado no **conteúdo do commit** (alterações, autor, data)

- **SHA-1 (Secure Hash Algorithm 1)**: hexadecimal de **40 caracteres**

- Permite **localizar rapidamente** um commit
:::

![](img/git-add-commit.png){.absolute width=50% right=200 top=400}

::: footer
[Guia dos principais comandos do GIT](https://blog.dbins.com.br/guia-dos-principais-comandos-do-git)
:::

## 12. Histórico

**hash curto**

- Referenciar um commit usando apenas os primeiros caracteres do **hash**

- Utilizamos esse identificador em **várias operações** no git

- Por exemplo:
  - Curto:   
  `3a4f9b7` 
  - Completo:  
  `3a4f9b7c19e2f4e1a0de9b7e5c6aebd7d5d85792`

## 12. Histórico

**HEAD**

- Ponteiro simbólico que **indica onde você está atualmente** no histórico de commits

- Aponta sempre para o **último commit "ativo"** — normalmente, o commit mais recente

- Quando você faz um git commit, o HEAD **se move automaticamente** para esse novo commit

```{r eval=FALSE}
# * commit C (HEAD -> main)
# * commit B
# * commit A
```

## 12. Histórico

`git log`: histórico dos commits

```{r eval=FALSE}
$ git log

# commit dfefc8530b25bfe96d8ccf7ba74aa0858ade6346 (HEAD -> master)
# Author: mauriciovancine <mauricio.vancine@gmail.com>
# Date:   Sat May 31 18:22:19 2025 -0300

#     modificação do test.txt

# commit 5a164d55896d6251249a5142f6110e8e0b06a49b
# Author: mauriciovancine <mauricio.vancine@gmail.com>
# Date:   Fri May 30 09:53:55 2025 -0300

#     add test.txt

# commit 50c520ff2cd531f1652eafb4654a9fb3fcd196af
# Author: mauriciovancine <mauricio.vancine@gmail.com>
# Date:   Thu May 29 09:34:13 2025 -0300

#     first commit
```

## 12. Histórico

`git log [arquivo]`: histórico dos commits para arquivos

```{r eval=FALSE}
$ git log test.txt

# commit dfefc8530b25bfe96d8ccf7ba74aa0858ade6346 (HEAD -> master)
# Author: mauriciovancine <mauricio.vancine@gmail.com>
# Date:   Sat May 31 18:22:19 2025 -0300

#     modificação do test.txt

# commit 5a164d55896d6251249a5142f6110e8e0b06a49b
# Author: mauriciovancine <mauricio.vancine@gmail.com>
# Date:   Fri May 30 09:53:55 2025 -0300

#     add test.txt
```

## 12. Histórico

`git log --oneline`: histórico dos commits simplificado

```{r eval=FALSE}
$ git log --oneline

# dfefc85 (HEAD -> master) modificação do test.txt
# 5a164d5 add test.txt
# 50c520f first commit
```

## 12. Histórico

`git log --graph`: histórico dos commits em grafo

```{r eval=FALSE}
$ git log --graph

# * commit dfefc8530b25bfe96d8ccf7ba74aa0858ade6346 (HEAD -> master)
# | Author: mauriciovancine <mauricio.vancine@gmail.com>
# | Date:   Sat May 31 18:22:19 2025 -0300
# | 
# |     modificação do test.txt
# | 
# * commit 5a164d55896d6251249a5142f6110e8e0b06a49b
# | Author: mauriciovancine <mauricio.vancine@gmail.com>
# | Date:   Fri May 30 09:53:55 2025 -0300
# | 
# |     add test.txt
# | 
# * commit 50c520ff2cd531f1652eafb4654a9fb3fcd196af
#   Author: mauriciovancine <mauricio.vancine@gmail.com>
#   Date:   Thu May 29 09:34:13 2025 -0300
#   
#       first commit
```

## 12. Histórico

`git log --grep`: faz uma busca no histórico dos commits

```{r eval=FALSE}
$ git log --grep="first commit"

# commit 50c520ff2cd531f1652eafb4654a9fb3fcd196af
# Author: mauriciovancine <mauricio.vancine@gmail.com>
# Date:   Thu May 29 09:34:13 2025 -0300
# 
#     first commit
```

## 12. Histórico

`git log --author`: filtra o histórico dos commits por autor

```{r eval=FALSE}
$ git log --author="mauricio"

# commit dfefc8530b25bfe96d8ccf7ba74aa0858ade6346 (HEAD -> master)
# Author: mauriciovancine <mauricio.vancine@gmail.com>
# Date:   Sat May 31 18:22:19 2025 -0300
# 
#     modificação do test.txt
# 
# commit 5a164d55896d6251249a5142f6110e8e0b06a49b
# Author: mauriciovancine <mauricio.vancine@gmail.com>
# Date:   Fri May 30 09:53:55 2025 -0300
# 
#     add test.txt
# 
# commit 50c520ff2cd531f1652eafb4654a9fb3fcd196af
# Author: mauriciovancine <mauricio.vancine@gmail.com>
# Date:   Thu May 29 09:34:13 2025 -0300
```

## 12. Histórico

`git log`: cheatsheet

![](img/git_log_cheatsheet.png){fig-align='center'}

::: footer
[Git Log Cheatsheet](https://elijahmanor.com/blog/git-log)
:::

## 12. Histórico

`git show`: detalhes de um commit

```{r eval=FALSE}
$ git show

# commit dfefc8530b25bfe96d8ccf7ba74aa0858ade6346 (HEAD -> master)
# Author: mauriciovancine <mauricio.vancine@gmail.com>
# Date:   Sat May 31 18:22:19 2025 -0300
# 
#     modificação do test.txt
# 
# diff --git a/test.txt b/test.txt
# index e69de29..f5201c0 100644
# --- a/test.txt
# +++ b/test.txt
# @@ -0,0 +1 @@
# +Acabo de inserir uma edição ao meu arquivo
# \ No newline at end of file
```

## 12. Histórico

`git show [hash]`: detalhes de um commit específico

```{r eval=FALSE}
$ git log --oneline
# dfefc85 (HEAD -> master) modificação do test.txt
# 5a164d5 add test.txt
# 50c520f first commit
```

<br>

```{r eval=FALSE}
$ git show 5a164d5
# commit 5a164d55896d6251249a5142f6110e8e0b06a49b
# Author: mauriciovancine <mauricio.vancine@gmail.com>
# Date:   Fri May 30 09:53:55 2025 -0300
#
#    add test.txt
#
# diff --git a/test.txt b/test.txt
# new file mode 100644
# index 0000000..e69de29
```

## 12. Histórico

`git show [arquivo]`: detalhes de um arquivo específico

```{r eval=FALSE}
$ git show test.txt
# commit dfefc8530b25bfe96d8ccf7ba74aa0858ade6346 (HEAD -> master)
# Author: mauriciovancine <mauricio.vancine@gmail.com>
# Date:   Sat May 31 18:22:19 2025 -0300
# 
#     modificação do test.txt
# 
# diff --git a/test.txt b/test.txt
# index e69de29..f5201c0 100644
# --- a/test.txt
# +++ b/test.txt
# @@ -0,0 +1 @@
# +Acabo de inserir uma edição ao meu arquivo
# \ No newline at end of file
```

## 13. Diferenças

`git diff`: diferenças realizadas em um repositório

![](img/git_diff.png){fig-align='center'}

:::footer
[Work with Your History in Git](https://trailhead.salesforce.com/pt-BR/content/learn/modules/git-and-git-hub-basics/work-with-your-history-in-git)
:::

## 13. Diferenças

`git diff`: diferenças entre **working directory** e **staging area**

```{r eval=FALSE}
git diff
```

<br>
**Observação**: Não retornou nenhuma diferença, pois não editamos o arquivo

![](img/general_bloco_notas.png){fig-align='center'}

## 13. Diferenças

`git diff`: diferenças entre **working directory** e **staging area**

<br>
Vamos editar o arquivo "test.txt" usando o terminal

```{r eval=FALSE}
echo "" >> test.txt
echo "Nova linha de código" >> test.txt
```

![](img/general_bloco_notas.png){fig-align='center'}

## 13. Diferenças

`git diff`: diferenças entre **working directory** e **staging area**

```{r eval=FALSE}
$ git diff

# diff --git a/test.txt b/test.txt
# index f5201c0..74cb9b5 100644
# --- a/test.txt
# +++ b/test.txt
# @@ -1 +1,2 @@
# -Acabo de inserir uma edição ao meu arquivo
# \ No newline at end of file
# +Acabo de inserir uma edição ao meu arquivo
# +Nova linha de código
```

::: {style="font-size: 80%;"}
- `diff --git a/test.txt b/test.txt`: que arquivo mudou
- `@@...@@`: onde foi mudado
- `-`: linhas removidas
- `+`: linhas adicionadas
:::

## 13. Diferenças

`git diff --staged`: diferenças entre **staging area** e **repository**

```{r eval=FALSE}
$ git diff --staged
```

**Observação**: Não retornou nenhuma diferença, pois não adicionamos ao staging area

## 13. Diferenças

`git diff --staged`: diferenças entre **staging area** e **repository**

```{r eval=FALSE}
$ git add -Av
# add 'test.txt'
```

```{r eval=FALSE}
$ git diff --staged
# diff --git a/test.txt b/test.txt
# index f5201c0..74cb9b5 100644
# --- a/test.txt
# +++ b/test.txt
# @@ -1 +1,2 @@
# -Acabo de inserir uma edição ao meu arquivo
# \ No newline at end of file
# +Acabo de inserir uma edição ao meu arquivo
# +Nova linha de código
```

## 13. Diferenças

`git diff HEAD`: diferenças entre **working directory** e **repository**

```{r eval=FALSE}
$ git diff HEAD
# diff --git a/test.txt b/test.txt
# index f5201c0..74cb9b5 100644
# --- a/test.txt
# +++ b/test.txt
# @@ -1 +1,2 @@
# -Acabo de inserir uma edição ao meu arquivo
# \ No newline at end of file
# +Acabo de inserir uma edição ao meu arquivo
# +Nova linha de código
```

## 13. Diferenças

`git diff [arquivo]`: diferenças entre versões do mesmo arquivo

```{r eval=FALSE}
$ git diff test.txt

# diff --git a/test.txt b/test.txt
# index f5201c0..74cb9b5 100644
# --- a/test.txt
# +++ b/test.txt
# @@ -1 +1,2 @@
# -Acabo de inserir uma edição ao meu arquivo
# \ No newline at end of file
# +Acabo de inserir uma edição ao meu arquivo
# +Nova linha de código
```

## 13. Diferenças

`git diff [hash1] [hash2]`: diferenças entre commits

```{r eval=FALSE}
$ git log --oneline
```

```{r eval=FALSE}
$ git diff 5a164d5 50c520f
# diff --git a/test.txt b/test.txt
# deleted file mode 100644
# index e69de29..0000000
```

## 13. Diferenças

`git diff 5a164d5 50c520f --stat`: diferenças em resumo, sem mostrar o conteúdo alterado

```{r eval=FALSE}
$ git diff 5a164d5 50c520f --stat
#  test.txt | 0
# 1 file changed, 0 insertions(+), 0 deletions(-)
```

#
![](img/break-time02.png){fig-align='center'}

# E como voltar no tempo?

# 
![](img/gif_delorean.gif){fig-align='center'}

# 14. Desfazer: git restore, git revert e git reset

## 14. Desfazer

::: columns
::: {.column width="50%"}
::: {style="font-size: 80%;"}
1. `git restore`: desfaz alterações na **working tree** ou **staging area**

<br><br><br><br>

2. `git revert`: desfaz commits, mas **preserva o histórico** (criando outro commit)
3. `git reset`:  desfaz commits, mas **deleta o histórico** (deletando commits)
:::
:::
::: {.column width="50%"}
![](img/git_restore.png){.absolute width=40% right=70 top=100}
![](img/git_revert_reset.png){.absolute width=30% right=130 top=370}
:::
:::

## 14. Desfazer

::: {style="font-size: 95%;"}
`git restore`: desfaz alterações na **working tree** ou **staging area**
:::

![](img/git_restore.png){fig-align='center'}

:::footer
[Reverting Staged Changes](https://codefinity.com/courses/v2/7533d91f-0a23-44a3-afc7-c84d5072e189/b9a4a4e8-3d95-4d5d-bf29-f87c3fd673a4/b1df4ebb-6f34-4234-b915-62ef85e0bdd6)
:::

## 14. Desfazer

`git restore [arquivo]`: desfaz alterações na **working tree**

```{r eval=FALSE}
$ git status

# On branch main
# nothing to commit, working tree clean
```

![](img/git_add_commit_flow.png){.absolute width=40% right=300 top=450}

## 14. Desfazer

`git restore [arquivo]`: desfaz alterações na **working tree**

- Apaguem o arquivo `test.txt` da pasta **test**

![](img/general_bloco_notas.png){fig-align='center'}

## 14. Desfazer

`git restore [arquivo]`: desfaz alterações na **working tree**

```{r eval=FALSE}
$ git status

# On branch main
# Changes not staged for commit:
#   (use "git add/rm <file>..." to update what will be committed)
#   (use "git restore <file>..." to discard changes in working directory)
# 	deleted:    test.txt

# no changes added to commit (use "git add" and/or "git commit -a")
```

![](img/git_add_commit_flow.png){.absolute width=40% right=300 top=450}

## 14. Desfazer

`git restore [arquivo]`: desfaz alterações na **working tree**

```{r eval=FALSE}
$ git restore test.txt
```

![](img/git_restore.png){fig-align='center'}

:::footer
[Reverting Staged Changes](https://codefinity.com/courses/v2/7533d91f-0a23-44a3-afc7-c84d5072e189/b9a4a4e8-3d95-4d5d-bf29-f87c3fd673a4/b1df4ebb-6f34-4234-b915-62ef85e0bdd6)
:::

## 14. Desfazer

`git restore [arquivo]`: desfaz alterações na **working tree**

```{r eval=FALSE}
$ git restore .
```

![](img/git_restore.png){fig-align='center'}

## 14. Desfazer

`git restore [arquivo]`: desfaz alterações na **working tree**

```{r eval=FALSE}
$ git status

# On branch main
# nothing to commit, working tree clean
```

- Arquivo reapareceu na pasta...

![](img/git_add_commit_flow.png){.absolute width=40% right=300 top=450}

#
![](img/gif_cat_ohh.gif){fig-align='center'}

# E se eu já tiver feito um git add e mandado as alterações na **staging area**?

## 14. Desfazer

`git restore --staged`: desfaz alterações na **staging area**, mas mantém alterações dos arquivos

```{r eval=FALSE}
$ git status

# On branch main
# nothing to commit, working tree clean
```

![](img/git_add_commit_flow.png){.absolute width=40% right=300 top=450}

## 14. Desfazer

`git restore --staged`: desfaz alterações na **staging area**, mas mantém alterações dos arquivos

- Vamos editar o arquivo "test.txt" usando o terminal

```{r eval=FALSE}
echo "" >> test.txt
echo "Mais uma linha no meu arquivo" >> test.txt
```

![](img/general_bloco_notas.png){fig-align='center'}

## 14. Desfazer

`git restore --staged`: desfaz alterações na **staging area**, mas mantém alterações dos arquivos

```{r eval=FALSE}
$ git status

# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git restore <file>..." to discard changes in working directory)
# 	modified:   test.txt

# no changes added to commit (use "git add" and/or "git commit -a")
```

![](img/git_add_commit_flow.png){.absolute width=40% right=300 top=450}

## 14. Desfazer

`git restore --staged`: desfaz alterações na **staging area**, mas mantém alterações dos arquivos

- Vamos adicionar essas mudanças na **staging area**

```{r eval=FALSE}
$ git add -Av
# add 'test.txt'
```

![](img/git_add_commit_flow.png){.absolute width=40% right=300 top=450}

## 14. Desfazer

`git restore --staged`: desfaz alterações na **staging area**, mas mantém alterações dos arquivos

```{r eval=FALSE}
$ git status

# Changes to be committed:
#   (use "git restore --staged <file>..." to unstage)
# 	modified:   test.txt
```

![](img/git_add_commit_flow.png){.absolute width=40% right=300 top=450}

## 14. Desfazer

`git restore --staged`: desfaz alterações na **staging area**, mas mantém alterações dos arquivos

```{r eval=FALSE}
$ git restore --staged test.txt
```

![](img/git_restore.png){fig-align='center'}

:::footer
[Reverting Staged Changes](https://codefinity.com/courses/v2/7533d91f-0a23-44a3-afc7-c84d5072e189/b9a4a4e8-3d95-4d5d-bf29-f87c3fd673a4/b1df4ebb-6f34-4234-b915-62ef85e0bdd6)
:::

## 14. Desfazer

`git restore --staged`: desfaz alterações na **staging area**, mas mantém alterações dos arquivos

```{r eval=FALSE}
$ git status

# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git restore <file>..." to discard changes in working directory)
# 	modified:   test.txt

# no changes added to commit (use "git add" and/or "git commit -a")
```

![](img/git_add_commit_flow.png){.absolute width=40% right=300 top=450}

## 14. Desfazer

`git restore --staged --worktree`: desfaz alterações na **staging area** e na **work tree** (arquivos)

![](img/git_restore.png){fig-align='center'}

:::footer
[Reverting Staged Changes](https://codefinity.com/courses/v2/7533d91f-0a23-44a3-afc7-c84d5072e189/b9a4a4e8-3d95-4d5d-bf29-f87c3fd673a4/b1df4ebb-6f34-4234-b915-62ef85e0bdd6)
:::

## 14. Desfazer

`git restore --staged --worktree`: desfaz alterações na **staging area** e na **work tree** (arquivos)

```{r eval=FALSE}
$ git restore --staged --worktree test.txt
```

![](img/git_restore.png){fig-align='center'}

:::footer
[Reverting Staged Changes](https://codefinity.com/courses/v2/7533d91f-0a23-44a3-afc7-c84d5072e189/b9a4a4e8-3d95-4d5d-bf29-f87c3fd673a4/b1df4ebb-6f34-4234-b915-62ef85e0bdd6)
:::

# E se eu já tiver feito um commit e queira desfazer?

# 
![](img/general_butterfly_effect.png){fig-align='center'}

#
![](img/git_revert_reset.png){fig-align='center'}

## 14. Desfazer

`git revert [hash]`: desfaz commits, mas **preserva o histórico** (criando outro commit)

![](img/git_revert.png){fig-align='center'}

## 14. Desfazer

`git revert [hash]`: desfaz commits, mas **preserva o histórico** (criando outro commit)

```{r eval=FALSE}
$ git status

# On branch master
# nothing to commit, working tree clean
```

<br>

```{r eval=FALSE}
$ git log --oneline

# d0ad9d1 (HEAD -> main) correcao do ultimo commit
# c1c596e update file test.txt
# 4029d2c (origin/main, origin/HEAD) Create teste
```

## 14. Desfazer

`git revert [hash]`: desfaz commits, mas **preserva o histórico** (criando outro commit)

```{r eval=FALSE}
$ git revert c1c596e

# Revert "update file test.txt second time"

# This reverts commit 49af53ec06e09c2301241a1d555ab1d8b4ba0908.

# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
#
# On branch main
# Your branch is ahead of 'origin/main' by 6 commits.
#   (use "git push" to publish your local commits)
#
# Changes to be committed:
#       deleted:    teste
```

## 14. Desfazer

`git revert [hash]`: desfaz commits, mas **preserva o histórico** (criando outro commit)

::: {style="font-size: 80%;"}
- Abriu um editor de texto: Nano
- Editar a primeira linha para alterar a mensagem de commit
- `Ctrl + O` (Write out) > `Enter` > `Ctrl + X` (Exit)
:::

```{r eval=FALSE}
$ git revert c1c596e

# Revert "update file test.txt second time"

# This reverts commit 49af53ec06e09c2301241a1d555ab1d8b4ba0908.

# Please enter the commit message for your changes.
```

## 14. Desfazer

`git revert [hash]`: desfaz commits, mas **preserva o histórico** (criando outro commit)

```{r eval=FALSE}
$ git revert c1c596e

# [main c1c596e] Revert "update file test.txt second time"
# 1 file changed, 1 deletion(-)
# delete mode 100644 teste
```

![](img/git_revert.png){fig-align='center'}

## 14. Desfazer

`git revert [hash]`: desfaz commits, mas **preserva o histórico** (criando outro commit)

```{r eval=FALSE}
$ git log --oneline

# 49af53e update file test.txt second time
# d0ad9d1 correcao do ultimo commit
# c1c596e update file test.txt
# 4029d2c (origin/main, origin/HEAD) Create teste
```

![](img/git_revert.png){fig-align='center'}

#
![](img/git_revert_reset.png){fig-align='center'}

## 14. Desfazer

`git reset [modo] [hash]`: desfaz commits, mas **deleta o histórico** (deletando commits)

![](img/git_reset2.png){fig-align='center'}

## 14. Desfazer

`git reset [modo] [hash]`: desfaz commits, mas **deleta o histórico** (deletando commits)

<br>

Modos:

::: columns
::: {.column width="50%"}
::: {style="font-size: 70%;"}
- `--soft`: move **HEAD** para outro commit (modo seguro)
- `--mixed`: move **HEAD** e desfaz **staging** (modo seguro)
- `--hard`: move **HEAD**, desfaz **staging** e descarta alterações nos arquivos (modo não seguro)
:::
:::

::: {.column width="50%"}
:::
:::

![](img/git_reset_modes.png){.absolute width=50% right=-30 top=230}

## 14. Desfazer

`git reset --soft [hash]`: mover o **HEAD** para outro commit

```{r eval=FALSE}
$ git status

# On branch master
# nothing to commit, working tree clean
```

<br>

```{r eval=FALSE}
$ git log --oneline

# d0ad9d1 (HEAD -> main) correcao do ultimo commit
# c1c596e update file test.txt
# 4029d2c (origin/main, origin/HEAD) Create teste
```

## 14. Desfazer

`git reset --soft [hash]`: mover o **HEAD** para outro commit

```{r eval=FALSE}
$ git reset --soft c1c596e
```

<br>

```{r eval=FALSE}
$ git log --oneline

# d0ad9d1 correcao do ultimo commit
# c1c596e (HEAD -> main) update file test.txt
# 4029d2c (origin/main, origin/HEAD) Create teste
```

## 14. Desfazer

`git reset --soft [hash]`: mover o **HEAD** para outro commit

Detalhes:

::: {style="font-size: 80%;"}
  - HEAD volta para commit escolhido
  - Conteúdo do commit atual continua no **staging area**
  - Arquivos continuam alterados no **working directory** e prontos para commit
:::

Quando usar: 

::: {style="font-size: 80%;"}
  - Refazer o último commit, mantendo as mudanças no **staging area**
:::

## 14. Desfazer

`git reset --mixed [hash]`: mover o **HEAD** e desfazer o **staging area**

```{r eval=FALSE}
$ git status

# On branch master
# nothing to commit, working tree clean
```

<br>

```{r eval=FALSE}
$ git log --oneline

# d0ad9d1 (HEAD -> main) correcao do ultimo commit
# c1c596e update file test.txt
# 4029d2c (origin/main, origin/HEAD) Create teste
```

## 14. Desfazer

`git reset --mixed [hash]`: mover o **HEAD** e desfazer o **staging area**

```{r eval=FALSE}
$ git reset --mixed c1c596e
```

<br>

```{r eval=FALSE}
$ git log --oneline

# d0ad9d1 correcao do ultimo commit
# c1c596e (HEAD -> main) update file test.txt
# 4029d2c (origin/main, origin/HEAD) Create teste
```

## 14. Desfazer

`git reset --mixed [hash]`: mover o **HEAD** e desfazer o **staging area**

Detalhes:

::: {style="font-size: 80%;"}
- HEAD volta para commit escolhido
- Conteúdo do commit atual é removido do **staging area**
- Arquivos continuam alterados no **working directory** e não preparados para commit
:::

Quando usar: 

::: {style="font-size: 80%;"}
  - Desfazer o commit, mas ainda quero ver e editar as mudanças antes de comitar
:::

## 14. Desfazer

`git reset --hard [hash]`: move **HEAD**, desfaz **staging** e descarta alterações nos arquivos

```{r eval=FALSE}
$ git status

# On branch master
# nothing to commit, working tree clean
```

<br>

```{r eval=FALSE}
$ git log --oneline

# d0ad9d1 (HEAD -> main) correcao do ultimo commit
# c1c596e  update file test.txt
# 4029d2c (origin/main, origin/HEAD) Create teste
```

## 14. Desfazer

`git reset --hard [hash]`: move **HEAD**, desfaz **staging** e descarta alterações nos arquivos

```{r eval=FALSE}
$ git reset --hard c1c596e
```

<br>

```{r eval=FALSE}
$ git log --oneline

# d0ad9d1 correcao do ultimo commit
# c1c596e (HEAD -> main) update file test.txt
# 4029d2c (origin/main, origin/HEAD) Create teste
```

## 14. Desfazer

`git reset --hard [hash]`: move **HEAD**, desfaz **staging** e descarta alterações nos arquivos

Detalhes:

::: {style="font-size: 80%;"}
- HEAD volta para commit escolhido
- Conteúdo do commit atual é perdido: **staging area** e **working directory**
- Arquivos voltam exatamente ao estado do commit escolhido
:::

Quando usar: 

::: {style="font-size: 80%;"}
- Desfazer completamente um ou mais commits, eliminando as alterações
:::

## 14. Desfazer

`git reset --hard [hash]`: move **HEAD**, desfaz **staging** e descarta alterações nos arquivos

**Cuidado**: essa operação é irreversível (exceto `git reflog`)

![](img/general_butterfly_effect.png){fig-align='center'}

# 
![](img/git_branches.png){fig-align='center'}

# 15. Ramificações: git branch, git switch e git merge

## 15. Ramificações

- **Branch** (ou ramo) é uma linha paralela de desenvolvimento

![](img/git_branch.png){fig-align='center'}

## 15. Ramificações

- **Branch** (ou ramo) é uma linha paralela de desenvolvimento

- Funções:
  - Separar novas funcionalidades
  - Isolar correções de bugs
  - Trabalhar em paralelo com segurança
  - Facilitar a colaboração em equipe
  - Testes sem arriscar o código principal (`main` ou `master`)

## 15. Ramificações

**Importante!**

::: {style="font-size: 90%;"}
- Criar uma branch significa criar um **novo ponteiro** que pode evoluir independentemente
- Os arquivos locais **permanecem os mesmos**; apenas o histórico e o ponteiro mudam
- Apenas **arquivos versionados** (`git add` e `git commit`) fazem parte da branch
- Uma branch é como um **marcador de página**: você não copia o livro, apenas marca onde continuar
:::

## 15. Ramificações

`git branch`: listar as branchs e verificar a branch de edição (`*`)

::: {style="font-size: 90%;"}
- Em 2020, adotou-se `main` para a **branch principal** para adotar uma linguagem mais **inclusiva, clara e alinhada** com os padrões de desenvolvimento
:::

::: {style="font-size: 90%;"}
- Versões antigas: branch `master` 
:::

```{r eval=FALSE}
$ git branch
# * master
```

::: {style="font-size: 90%;"}
- Versões recentes: branch `main` 
:::

```{r eval=FALSE}
$ git branch
# * main
```

## 15. Ramificações

`git branch [nome-branch]`: criar uma branch

```{r eval=FALSE}
$ git branch branch-1

$ git branch
# branch-1
# * main
```

![](img/git_branch.png){fig-align='center'}

## 15. Ramificações

`git switch [nome-branch]`: trocar a branch de edição

```{r eval=FALSE}
$ git switch branch-1
# Switched to branch 'branch-1'
```

![](img/git_checkout_switch.png){fig-align='center'}

## 15. Ramificações

`git branch`: lista os branchs e verifica o branch de edição

```{r eval=FALSE}
$ git branch
# * branch-1
# main
```

![](img/git_branch.png){fig-align='center'}

## 15. Ramificações

`git switch -c [nome-branch]`: criar e mudar para a nova branch

```{r eval=FALSE}
$ git switch -c branch-2
# Switched to branch 'branch-2'
```

![](img/git_checkout_switch.png){fig-align='center'}

## 15. Ramificações

`git branch`: lista os branchs e verifica o branch de edição

```{r eval=FALSE}
$ git branch
# branch-1
# * branch-2
# main
```

![](img/git_branch.png){fig-align='center'}

## 15. Ramificações

`git branch -m [novo-nome]`: renomear uma branch de edição

```{r eval=FALSE}
$ git branch -m branch-3

$ git branch
# branch-1
# * branch-3
# main
```

![](img/git_branch.png){fig-align='center'}

## 15. Ramificações

`git branch -m [nome-antigo] [novo-nome]`: renomear uma branch

```{r eval=FALSE}
$ git branch -m branch-3 branch-2

$ git branch
# branch-1
# * branch-2
# main
```

![](img/git_branch.png){fig-align='center'}

## 15. Ramificações

`git branch -d [nome]`: deletar uma branch

```{r eval=FALSE}
$ git branch -d branch-1
# branch-1
# * branch-2
# main
```

![](img/git_branch.png){fig-align='center'}

## 15. Ramificações

Vamos criar um arquivo no diretório e na **branch-2**

```{r eval=FALSE}
$ touch teste_branch2.txt
$ git add -Av
$ git commit -m "add teste_branch2.txt"
```

![](img/general_bloco_notas.png){fig-align='center'}

## 15. Ramificações

`git switch`: trocar a branch de edição

```{r eval=FALSE}
$ git switch main
```

![](img/git_branch.png){fig-align='center'}

## 15. Ramificações

`git switch`: trocar a branch de edição

- O arquivo sumiu...

![](img/gif_cat_ohh.gif){fig-align='center'}

# Vamos juntar esses branches fazendo um merge

## 15. Ramificações

`git merge`: mescla as branchs em um único branch

![](img/git_merge.png){fig-align='center'}

## 15. Ramificações

`git merge`: mescla as branchs em um único branch

```{r eval=FALSE}
$ git merge branch-2

# Updating c1c596e..9900ebb
# Fast-forward
#  teste_branch2.txt | 0
#  1 file changed, 0 insertions(+), 0 deletions(-)
#  create mode 100644 teste_branch2.txt
```

![](img/git_merge.png){fig-align='center'}

## 15. Ramificações

`git merge`: mescla as branchs em um único branch

```{r eval=FALSE}
git log --oneline

# 7aeb06d (HEAD -> master, branch-1) add teste_branch1.txt
# f9f2e9c mod2 test.txt
# dcbd894 mod test.txt
# 8b33bc5 add test.txt
```

![](img/git_merge.png){fig-align='center'}

# CUIDADO!

# 
![](img/gif_git_merge.gif){fig-align='center'}

# 
![](img/git_merge_warning.png){fig-align='center'}

## 15. Ramificações

**Git Branch Cheatsheet**

![](img/git-branch-cheatsheet.webp){fig-align='center'}

:::footer
[Git Branch Cheatsheet](https://elijahmanor.com/blog/git-branch)
:::

# Vamos finalmente conectar o repositório local (diretório) com o repositório remoto (GitHub)

#
![](img/git_push_pull.svg){fig-align='center'}

## 16. Remoto

![](img/git_remote.png){fig-align='center'}

## 16. Remoto

`git remote`: gerencia conexões com repositórios remotos (GitHub)

```{r eval=FALSE}
$ git remote
# origin
```

<br>

- Mostra os nomes das conexões remotas
- `origin`: nome padrão para o repositório remoto principal

## 16. Remoto

`git remote`: gerencia conexões com repositórios remotos (GitHub)

```{r eval=FALSE}
$ git remote -v

# origin	git@github.com:mauriciovancine/teste.git (fetch)
# origin	git@github.com:mauriciovancine/teste.git (push)
```

<br>

::: {style="font-size: 80%;"}
- Mostra os nomes das conexões remotas: `origin`
- Mostra os URLs das conexões remotas: `git@github.com:mauriciovancine/teste.git`
- `fetch`: endereço para **buscar atualizações** do repositório remoto
- `push`: endereço para **enviar suas alterações** para o repositório remoto
:::

## 16. Remoto

`git remote add`: adiciona ligação com um repositório remoto (GitHub)

**Observação**: usar o SSH para não precisar digitar a senha

```{r eval=FALSE}
$ git remote add origin git@github.com:mauriciovancine/teste.git
```

![](img/git_remote.png){fig-align='center'}

# Tudo certo, o git sabe para onde deve enviar as alterações para o endereço do repositório remoto (GitHub)

## 16. Remoto

`git push`: envia suas alterações (commits) feitas localmente para o repositório remoto (GitHub)

![](img/git_push.png){fig-align='center'}

## 16. Remoto

`git push`: envia suas alterações (commits) feitas localmente para o repositório remoto (GitHub)

Função:

::: {style="font-size: 80%;"}
- Atualiza a branch correspondente no repositório remoto
- Torna suas mudanças disponíveis para outras pessoas
- Se não configurar a chave SSH, exige autenticação (usuário/senha ou token)
:::

![](img/git_push.png){fig-align='center'}

## 16. Remoto

`git push`: envia suas alterações (commits) feitas localmente para o repositório remoto (GitHub)

![](img/git_push_code.png){fig-align='center'}

## 16. Remoto

`git push`: envia suas alterações (commits) feitas localmente para o repositório remoto (GitHub)

```{r eval=FALSE}
$ git push -u origin main

# Enumerating objects: 41, done.
# Counting objects: 100% (41/41), done.
# Delta compression using up to 12 threads
# Compressing objects: 100% (35/35), done.
# Writing objects: 100% (35/35), 4.99 MiB | 155.00 KiB/s, done.
# Total 35 (delta 6), reused 0 (delta 0), pack-reused 0
# remote: Resolving deltas: 100% (6/6), completed with 6 local objects.
# To github.com:mauriciovancine/course-geospatial-data-r.git
#    accc9db..8f70e96  master -> master
```

## 16. Remoto

Em caso de incêndio...

![](img/git_push_fire.png){fig-align='center'}

## 16. Remoto

**CUIDADO**: muitas vezes há conflitos que precisam ser revolvidos entre o repositório local e o remoto

![](img/git_push_force01.jpg){.absolute width=50% right=520 top=200}
![](img/git_push_force02.jpg){.absolute width=46% right=0 top=200}

# E se houver arquivos [enormes] que eu queira versionar no GitHub?

## 16. Remoto

::: {style="font-size: 80%;"}
**Limites de tamanho**
:::

::: {style="font-size: 60%;"}
- Arquivos **acima de 25 MB** causam erro e o envio ao GitHub é bloqueado
- Para **arquivos maiores**, é necessário usar o [Git Large File Storage (LFS)](https://git-lfs.github.com/)
- O repositório no GitHub tem limite de **5 GB** no total
- É recomendável manter o repositório com menos de **1 GB**
- O GitHub **envia avisos** quando o tamanho se aproxima do limite
- Ao **exceder o limite**, o envio é bloqueado com uma mensagem de erro
:::

![](img/gif_large_files.gif){.absolute width=45% right=550 top=400}
![](img/github_limit.png){.absolute width=30% right=-50 top=50}

# E se eu quiser ver o que mudou no repositório remoto e trazer para o repositório local?

## 16. Remoto

![](img/git-fetch-git-pull.png){fig-align='center'}

:::footer
[Git Fetch vs Git Pull: Key Differences Every Developer Should Know](https://manitapanta.com.np/git-fetch-vs-git-pull/)
:::

## 16. Remoto

`git fetch`: busca atualizações do **repositório remoto** e as traz para o **repositório local**, mas não **altera** a branch atual

Função:

::: {style="font-size: 80%;"}
- Atualiza o histórico e as branches remotas
- Permite que você veja o que mudou antes de aplicar
- **Seguro**: não altera seus arquivos nem seu histórico local automaticamente
:::

![](img/git-fetch.png){fig-align='center'}

## 16. Remoto

`git fetch`: busca atualizações do **repositório remoto** e as traz para o **repositório local**, mas não **altera** a branch atual

```{r eval=FALSE}
$ git fetch origin
# remote: Enumerating objects: 4, done.
# remote: Counting objects: 100% (4/4), done.
# remote: Compressing objects: 100% (2/2), done.
# remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0 (from 0)
# Unpacking objects: 100% (3/3), 934 bytes | 934.00 KiB/s, done.
# From github.com:mauriciovancine/teste
#    4029d2c..dfb960b  main       -> origin/main
```

![](img/git-fetch.png){fig-align='center'}

## 16. Remoto

`git fetch`: busca atualizações do **repositório remoto** e as traz para o **repositório local**, mas não **altera** a branch atual

::: {style="font-size: 80%;"}
- Se quiser atualizar a branch local com as mudanças use:
  - `git merge`: para mesclar manualmente
  - `git rebase`: para reescrever o histórico de forma linear 
:::

```{r eval=FALSE}
$ git merge origin/main
$ git rebase origin/main
```

![](img/git-fetch.png){fig-align='center'}

## 16. Remoto

`git pull`: busca atualizações do **repositório remoto** e as traz para o **repositório local**, **alterando** a branch atual

![](img/git_pull.png){fig-align='center'}

## 16. Remoto

`git pull`: busca atualizações do **repositório remoto** e as traz para o **repositório local**, **alterando** a branch atual automativamente

- Equivalente a rodar: `git fetch` + `git merge`

Função:

::: {style="font-size: 80%;"}
- Sincronizar sua branch local com as alterações mais recentes do remoto
- Trabalhar colaborativamente, mantendo o código sempre atualizado
- Automatizar o processo de trazer e aplicar mudanças
- **Cuidado**: pode causar conflitos se houver alterações locais incompatíveis com as mudanças remotas
:::

## 16. Remoto

**Resumo**

![](img/git_remote_total.png)

:::footer
[What's the Difference Between the Git Fetch and Git Pull Commands?](https://www.linkedin.com/pulse/whats-difference-between-git-fetch-pull-commands-omar-ismail/)
:::

# Por fim, requisição das alterações do nosso repositório remoto para o repositório remoto original: **Pull request**

# 
![](img/git_push_pull_request.png){fig-align='center'}

## 17. Pull request

`Pull Request`: solicita que o repositório central (remoto) aceite (pull - 'puxe') as alterações realizadas do nosso fork

![](img/git_pull_request.png){fig-align='center'}

## 17. Pull request

`Pull Request`: solicita que o repositório central (remoto) aceite (pull - 'puxe') as alterações realizadas do nosso fork

![](img/git_pull_request_githu.png){fig-align='center'}

# 18. Conflitos

## Conflitos

![](img/git_conflitos){fig-align='center'}

# 19. Interface Gráfica do RStudio

## Agradecimento mais que justo

Agradecimento à [Beatriz Milz](https://beatrizmilz.com/) pelas figuras ~~surrupiadas~~ (eu pedi...)

![](img/bea.jpg){fig-align='center'}

:::footer
[Beatriz Milz](https://beatrizmilz.com/)
:::

## 19. Interface Gráfica do RStudio

**Git Panel**

- RStudio tem um **cliente Git** na aba "Git"
- Esse painel aparece em **projetos** que estejam **versionados com git**

![](img/rstudio_git_pane01.png){fig-align='center'}


## 19. Interface Gráfica do RStudio

**Git Panel - Detalhes**

![](img/rstudio_git_pane02.png){fig-align='center'}

## 19. Interface Gráfica do RStudio

**Git Panel - Branches**

![](img/rstudio_git_pane03.png){fig-align='center'}

## 19. Interface Gráfica do RStudio

**Git Panel - Diff - Changes: Revisar mudanças**

![](img/rstudio_git_pane04.png){fig-align='center'}


## 19. Interface Gráfica do RStudio

**Git Panel - Diff - History: Histórico de mudanças**

![](img/rstudio_git_pane05.png){fig-align='center'}

## 19. Interface Gráfica do RStudio

**Git pane - Staged**

![](img/rstudio_git_pane06.png){fig-align='center'}

## 19. Interface Gráfica do RStudio

**Git pane - Staged e File status**

![](img/rstudio_git_status.png){fig-align='center'}
![](img/rstudio_git_pane06.png){fig-align='center'}

## 19. Interface Gráfica do RStudio

**Git pane - Commit**

![](img/rstudio_git_pane07.png){fig-align='center'}

## 19. Interface Gráfica do RStudio

**Git pane - Commit**

![](img/rstudio_git_pane08.png){fig-align='center'}

## 19. Interface Gráfica do RStudio

**Git pane - Push e Pull**

![](img/rstudio_git_pane09.png){fig-align='center'}

# Últimas palavras

#
![](img/general_make_impossible.jpeg){fig-align='center'}

#
![](img/gif_bugcat_error.gif){fig-align='center'}

#
![](img/gif_bugcat_sad.gif){fig-align='center'}

#
![](img/cheatsheet_git.jpg){fig-align='center'}

# 20. Mais informações

## 20. Mais informações

**Git Cheat Sheets**

[](https://github.github.com/training-kit/downloads/pt_BR/github-git-cheat-sheet.pdf)

## 20. Mais informações

**usethis**

Comandos direto no R para criar e versionar repositórios

```{r eval=FALSE}
install.packages("usethis")
devtools::install_github("r-lib/usethis")
```

![](img/package_usethis.png){fig-align='center'}

:::footnoote
[usethis](https://usethis.r-lib.org/)
:::

## 20. Mais informações

**Livros**

- [Pro Git](https://git-scm.com/book/en/v2) - Scott Chacon e Ben Straub
- [Beginning Git and GitHub](https://www.amazon.com.br/Beginning-Git-GitHub-Comprehensive-Management/dp/1484253124) - Mariot Tsitoara
- [Happy Git and GitHub for the useR](https://happygitwithr.com/) - Jenny Bryan
- [Zen do R](https://curso-r.github.io/zen-do-r/index.html) - Caio Lente + Curso-R

## 20. Mais informações

**Material**

- [Primeiros passos utilizando o Git e GitHub no RStudio](https://beatrizmilz.github.io/RLadies-Git-RStudio-2019) - Beatriz Milz
- [Git e GitHub no RStudio](https://beatrizmilz.com/git_rstudio.html) - Beatriz Milz
- [Torne-se um guru do git](https://www.atlassian.com/br/git/tutorials)
- [RStudio e Github no dia a dia](https://blog.curso-r.com/posts/2017-07-17-rstudio-e-github/)
- [GitFichas - Jéssica Temporal](https://gitfichas.com/)

## 20. Mais informações

**Material**

- [Oh Shit, Git!?!](https://ohshitgit.com/pt_BR) - Katie Sylor-Miller
- [Dangit, Git!?!](https://dangitgit.com/pt_BR) - Katie Sylor-Miller
- [Version Control with GitHub](https://www.neonscience.org/resources/learning-hub/tutorials/version-control-github)
- [Git Cheat Sheet – 50 Git Commands You Should Know](https://www.freecodecamp.org/news/git-cheat-sheet/)

## 20. Mais informações

**Curso de Git - Bóson Treinamentos**

<p align="center">
<iframe width="80%" height="480" align="center" src="https://www.youtube.com/embed/YnVnFanIAzU" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen>
</iframe>
</p>

## 20. Mais informações

**Git e Github para iniciantes - Willian Justen de Vasconcellos**

<p align="center">
<iframe width="80%" height="480" align="center" src="https://www.youtube.com/embed/IBClN6VpJDw" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen>
</iframe>
</p>

## 20. Mais informações

**Curso de Git -  Professor Aquino**

<p align="center">
<iframe width="80%" height="480" align="center" src="https://www.youtube.com/embed/udw3J335ZHo" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen>
</iframe>
</p>

## Muito obrigado!

::: columns
::: {.column width="50%"}
**Agradecimentos**:

- [Beatriz Milz](https://beatrizmilz.com/)

<center>
<img src="img/fapesp.png" style="width:70%"/>
</center>
:::

::: {.column width="50%"}
**Contato**:

[mauricio.vancine@gmail.com]()
[mauriciovancine.github.io](https://mauriciovancine.github.io)

<center>
<img src="img/gif_frogs.gif" style="width:75%"/>
</center>

:::
:::

:::footer
Slides por [Maurício Vancine](https://mauriciovancine.github.io), feitos com [Quarto](https://quarto.org/). Código disponível no [GitHub](https://github.com/mauriciovancine/workshop-git-github-rstudio).
:::